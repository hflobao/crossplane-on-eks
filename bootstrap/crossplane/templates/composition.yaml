apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xeks.{{ .Values.apiGroup }}
  labels:
    provider: aws
    function: patch-and-transform
spec:
  writeConnectionSecretsToNamespace: crossplane-system
  compositeTypeRef:
    apiVersion: {{ .Values.apiGroup }}/{{ .Values.apiVersion }}
    kind: XEks
  mode: Pipeline
  pipeline:
    - step: patch-and-transform
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        patchSets:
          - name: common-parameters-global
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.providerConfigName
                toFieldPath: spec.providerConfigRef.name
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.deletionPolicy
                toFieldPath: spec.deletionPolicy
          - name: common-parameters-regional
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.providerConfigName
                toFieldPath: spec.providerConfigRef.name
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.deletionPolicy
                toFieldPath: spec.deletionPolicy
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.region
                toFieldPath: spec.forProvider.region
        resources:
          {{- if .Values.networking.createVpc }}
          - name: vpc
            base:
              apiVersion: ec2.aws.upbound.io/v1beta1
              kind: VPC
              metadata:
                labels:
                  vpc: crossplane
              spec:
                forProvider:
                  cidrBlock: ""
                  enableDnsSupport: true
                  enableDnsHostnames: true
                  tags:
                    - key: Name
                      value: Crossplane-VPC
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: spec.parameters.vpcCidr
                toFieldPath: spec.forProvider.cidrBlock
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required
              - fromFieldPath: status.atProvider.id
                toFieldPath: status.eks.vpcId
                type: ToCompositeFieldPath

          {{ if .Values.networking.createPublicSubnets -}}
          - name: internetGateway
            base:
              apiVersion: ec2.aws.upbound.io/v1beta1
              kind: InternetGateway
              spec:
                forProvider:
                  vpcId: ""
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: status.eks.vpcId
                toFieldPath: spec.forProvider.vpcId
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required
              - fromFieldPath: status.atProvider.id
                toFieldPath: status.eks.internetGatewayId
                type: ToCompositeFieldPath

          {{- range $i, $cidr := .Values.networking.publicSubnetCidrs }}
          - name: publicSubnet{{ $i }}
            base:
              apiVersion: ec2.aws.upbound.io/v1beta1
              kind: Subnet
              spec:
                forProvider:
                  availabilityZone: ""
                  cidrBlock: ""
                  vpcId: ""
                  tags:
                    - key: kubernetes.io/role/elb
                      value: 1
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: status.eks.vpcId
                toFieldPath: spec.forProvider.vpcId
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required
              - fromFieldPath: spec.parameters.publicSubnet{{ $i }}Cidr
                toFieldPath: spec.forProvider.cidrBlock
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required
              - combine:
                  strategy: string
                  string:
                    fmt: "%s%s"
                  variables:
                    - fromFieldPath: spec.parameters.region
                    - fromFieldPath: spec.parameters.publicSubnet{{ $i }}Az
                toFieldPath: spec.forProvider.availabilityZone
                type: CombineFromComposite
              - fromFieldPath: status.atProvider.id
                toFieldPath: status.eks.publicSubnet{{ $i }}Id
                type: ToCompositeFieldPath
              - fromFieldPath: status.atProvider.id
                toFieldPath: status.eks.publicSubnets
                type: ToCompositeFieldPath
                policy:
                  mergeOptions:
                    appendSlice: true
                    keepMapValues: true
          {{- end }}

          - name: publicRouteTable
            base:
              apiVersion: ec2.aws.upbound.io/v1beta1
              kind: RouteTable
              spec:
                forProvider:
                  vpcId: ""
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: status.eks.vpcId
                toFieldPath: spec.forProvider.vpcId
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required
              - fromFieldPath: status.atProvider.id
                toFieldPath: status.eks.publicRouteTableId
                type: ToCompositeFieldPath

          - name: publicDefaultRoute
            base:
              apiVersion: ec2.aws.upbound.io/v1beta2
              kind: Route
              spec:
                forProvider:
                  destinationCidrBlock: 0.0.0.0/0
                  gatewayId: ""
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: status.eks.internetGatewayId
                toFieldPath: spec.forProvider.gatewayId
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required

          - name: publicLocalVpcRoute
            base:
              apiVersion: ec2.aws.upbound.io/v1beta2
              kind: Route
              spec:
                forProvider:
                  destinationCidrBlock: ""
                  gatewayId: local
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: spec.parameters.vpcCidr
                toFieldPath: spec.forProvider.destinationCidrBlock
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required

          {{ range $i, $cidr := .Values.networking.publicSubnetCidrs -}}
          - name: publicRouteTableAssociation{{ $i }}
            base:
              apiVersion: ec2.aws.upbound.io/v1beta1
              kind: RouteTableAssociation
              spec:
                forProvider:
                  routeTableId: ""
                  subnetId: ""
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: status.eks.publicRouteTableId
                toFieldPath: spec.forProvider.routeTableId
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required
              - fromFieldPath: status.eks.publicSubnet{{ $i }}Id
                toFieldPath: spec.forProvider.subnetId
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required
          {{- end }}
          {{- end }}

          {{ if and .Values.networking.createPrivateSubnets .Values.networking.createPublicSubnets -}}
          {{ range $i, $cidr := .Values.networking.privateSubnetCidrs -}}
          - name: privateSubnet{{ $i }}
            base:
              apiVersion: ec2.aws.upbound.io/v1beta1
              kind: Subnet
              spec:
                forProvider:
                  availabilityZone: ""
                  cidrBlock: ""
                  vpcId: ""
                  tags:
                    - key: kubernetes.io/role/internal-elb
                      value: 1
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: status.eks.vpcId
                toFieldPath: spec.forProvider.vpcId
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required
              - fromFieldPath: spec.parameters.privateSubnet{{ $i }}Cidr
                toFieldPath: spec.forProvider.cidrBlock
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required
              - combine:
                  strategy: string
                  string:
                    fmt: "%s%s"
                  variables:
                    - fromFieldPath: spec.parameters.region
                    - fromFieldPath: spec.parameters.privateSubnet{{ $i }}Az
                toFieldPath: spec.forProvider.availabilityZone
                type: CombineFromComposite
              - fromFieldPath: status.atProvider.id
                toFieldPath: status.eks.privateSubnet{{ $i }}Id
                type: ToCompositeFieldPath
              - fromFieldPath: status.atProvider.id
                toFieldPath: status.eks.privateSubnets
                type: ToCompositeFieldPath
                policy:
                  mergeOptions:
                    appendSlice: true
                    keepMapValues: true
          {{- end }}

          {{ if .Values.networking.singleNatGateway -}}
          - name: privateElasticIp
            base:
              apiVersion: ec2.aws.upbound.io/v1beta1
              kind: EIP
              spec:
                forProvider:
                  vpc: true
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: status.atProvider.id
                toFieldPath: status.eks.elasticIpId
                type: ToCompositeFieldPath

          - name: privateNatGateway
            base:
              apiVersion: ec2.aws.upbound.io/v1beta1
              kind: NATGateway
              spec:
                forProvider:
                  allocationId: ""
                  subnetId: ""
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: status.eks.elasticIpId
                toFieldPath: spec.forProvider.allocationId
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required
              - fromFieldPath: status.eks.publicSubnet0Id
                toFieldPath: spec.forProvider.subnetId
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required
              - fromFieldPath: status.atProvider.id
                toFieldPath: status.eks.natGatewayId
                type: ToCompositeFieldPath

          - name: privateRouteTable
            base:
              apiVersion: ec2.aws.upbound.io/v1beta1
              kind: RouteTable
              spec:
                forProvider:
                  vpcId: ""
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: status.eks.vpcId
                toFieldPath: spec.forProvider.vpcId
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required
              - fromFieldPath: status.atProvider.id
                toFieldPath: status.eks.privateRouteTableId
                type: ToCompositeFieldPath

          - name: privateDefaultRoute
            base:
              apiVersion: ec2.aws.upbound.io/v1beta2
              kind: Route
              spec:
                forProvider:
                  destinationCidrBlock: 0.0.0.0/0
                  natGatewayId: ""
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: status.eks.natGatewayId
                toFieldPath: spec.forProvider.natGatewayId
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required

          - name: privateLocalVpcRoute
            base:
              apiVersion: ec2.aws.upbound.io/v1beta2
              kind: Route
              spec:
                forProvider:
                  destinationCidrBlock: ""
                  gatewayId: local
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: spec.parameters.vpcCidr
                toFieldPath: spec.forProvider.destinationCidrBlock
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required

          {{ range $i, $cidr := .Values.networking.privateSubnetCidrs }}
          - name: privateRouteTableAssociation{{ $i }}
            base:
              apiVersion: ec2.aws.upbound.io/v1beta1
              kind: RouteTableAssociation
              spec:
                forProvider:
                  routeTableId: ""
                  subnetId: ""
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: status.eks.privateRouteTableId
                toFieldPath: spec.forProvider.routeTableId
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required
              - fromFieldPath: status.eks.privateSubnet{{ $i }}Id
                toFieldPath: spec.forProvider.subnetId
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required
          {{- end }}

          {{- else }}

          {{ range $i, $cidr := .Values.networking.publicSubnetCidrs -}}
          - name: privateElasticIp{{ $i }}
            base:
              apiVersion: ec2.aws.upbound.io/v1beta1
              kind: EIP
              spec:
                forProvider:
                  vpc: true
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: status.atProvider.id
                toFieldPath: status.eks.elasticIp{{ $i }}Id
                type: ToCompositeFieldPath

          - name: privateNatGateway{{ $i }}
            base:
              apiVersion: ec2.aws.upbound.io/v1beta1
              kind: NATGateway
              spec:
                forProvider:
                  allocationId: ""
                  subnetId: ""
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: status.eks.elasticIp{{ $i }}Id
                toFieldPath: spec.forProvider.allocationId
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required
              - fromFieldPath: status.eks.publicSubnet{{ $i }}Id
                toFieldPath: spec.forProvider.subnetId
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required
              - fromFieldPath: status.atProvider.id
                toFieldPath: status.eks.natGateway{{ $i }}Id
                type: ToCompositeFieldPath

          - name: privateRouteTable{{ $i }}
            base:
              apiVersion: ec2.aws.upbound.io/v1beta1
              kind: RouteTable
              spec:
                forProvider:
                  vpcId: ""
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: status.eks.vpcId
                toFieldPath: spec.forProvider.vpcId
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required
              - fromFieldPath: status.atProvider.id
                toFieldPath: status.eks.privateRouteTable{{ $i }}Id
                type: ToCompositeFieldPath

          - name: privateDefaultRoute{{ $i }}
            base:
              apiVersion: ec2.aws.upbound.io/v1beta2
              kind: Route
              spec:
                forProvider:
                  destinationCidrBlock: 0.0.0.0/0
                  natGatewayId: ""
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: status.eks.natGateway{{ $i }}Id
                toFieldPath: spec.forProvider.natGatewayId
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required

          - name: privateLocalVpcRoute{{ $i }}
            base:
              apiVersion: ec2.aws.upbound.io/v1beta2
              kind: Route
              spec:
                forProvider:
                  destinationCidrBlock: ""
                  gatewayId: local
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: spec.parameters.vpcCidr
                toFieldPath: spec.forProvider.destinationCidrBlock
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required
          {{- end }}

          {{ range $i, $cidr := .Values.networking.privateSubnetCidrs -}}
          - name: privateRouteTableAssociation{{ $i }}
            base:
              apiVersion: ec2.aws.upbound.io/v1beta1
              kind: RouteTableAssociation
              spec:
                forProvider:
                  routeTableId: ""
                  subnetId: ""
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: status.eks.privateRouteTable{{ $i }}Id
                toFieldPath: spec.forProvider.routeTableId
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required
              - fromFieldPath: status.eks.privateSubnet{{ $i }}Id
                toFieldPath: spec.forProvider.subnetId
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required
          {{- end }}
          {{- end }}
          {{- end }}
          {{- end }}

          - name: clusterRole
            base:
              apiVersion: iam.aws.upbound.io/v1beta1
              kind: Role
              metadata:
                labels:
                  role: cluster
              spec:
                forProvider:
                  assumeRolePolicy: |
                    {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Principal": {
                            "Service": "eks.amazonaws.com"
                          },
                          "Action": "sts:AssumeRole"
                        }
                      ]
                    }
            patches:
              - type: PatchSet
                patchSetName: common-parameters-global
              - fromFieldPath: status.atProvider.arn
                toFieldPath: status.eks.clusterRoleArn
                type: ToCompositeFieldPath
              - fromFieldPath: status.atProvider.arn
                policy:
                  fromFieldPath: Required
                toFieldPath: status.eks.accountId
                transforms:
                  - string:
                      regexp:
                        group: 1
                        match: arn:aws:iam::(\d+):.*
                      type: Regexp
                    type: string
                type: ToCompositeFieldPath

          - name: clusterRolePolicyAttachment
            base:
              apiVersion: iam.aws.upbound.io/v1beta1
              kind: RolePolicyAttachment
              spec:
                forProvider:
                  policyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
                  roleSelector:
                    matchControllerRef: true
                    matchLabels:
                      role: cluster
            patches:
              - type: PatchSet
                patchSetName: common-parameters-global

          - name: clusterEncriptionKey
            base:
              apiVersion: kms.aws.upbound.io/v1beta1
              kind: Key
              spec:
                forProvider:
                  region: ""
                  description: "KMS key used to encrypt the EKS cluster"
                  customerMasterKeySpec: SYMMETRIC_DEFAULT
                  enableKeyRotation: true
                  policy: ""
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - combine:
                  strategy: string
                  string:
                    fmt: |
                      {
                        "Version": "2012-10-17",
                        "Id": "key-default-1",
                        "Statement": [
                          {
                            "Sid": "Enable IAM User Permissions",
                            "Effect": "Allow",
                            "Principal": {
                              "AWS": "arn:aws:iam::%s:root"
                            },
                            "Action": "kms:*",
                            "Resource": "*"
                          },
                          {
                            "Sid": "Allow access for Key Administrators",
                            "Effect": "Allow",
                            "Principal": {
                              "AWS": [
                                "%s"
                              ]
                            },
                            "Action": [
                              "kms:Create*",
                              "kms:Describe*",
                              "kms:Enable*",
                              "kms:List*",
                              "kms:Put*",
                              "kms:Update*",
                              "kms:Revoke*",
                              "kms:Disable*",
                              "kms:Get*",
                              "kms:Delete*",
                              "kms:ScheduleKeyDeletion",
                              "kms:CancelKeyDeletion"
                            ],
                            "Resource": "*"
                          },
                          {
                            "Sid": "Allow use of the key",
                            "Effect": "Allow",
                            "Principal": {
                              "AWS": "%s"
                            },
                            "Action": [
                              "kms:Encrypt",
                              "kms:Decrypt",
                              "kms:ReEncrypt*",
                              "kms:GenerateDataKey*",
                              "kms:DescribeKey"
                            ],
                            "Resource": "*"
                          }
                        ]
                      }
                  variables:
                    - fromFieldPath: status.eks.accountId
                    - fromFieldPath: spec.parameters.iam.clusterAdminRoleArn
                    - fromFieldPath: status.eks.clusterRoleArn
                policy:
                  fromFieldPath: Required
                toFieldPath: spec.forProvider.policy
                type: CombineFromComposite
              - fromFieldPath: status.atProvider.arn
                toFieldPath: status.eks.clusterKeyArn
                type: ToCompositeFieldPath

          - name: clusterEncriptionKeyAlias
            base:
              apiVersion: kms.aws.upbound.io/v1beta1
              kind: Alias
              spec:
                forProvider:
                  region: ""
                  targetKeyId: ""
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: status.eks.clusterKeyArn
                toFieldPath: spec.forProvider.targetKeyId
                type: FromCompositeFieldPath

          - name: kubernetesCluster
            base:
              apiVersion: eks.aws.upbound.io/v1beta1
              kind: Cluster
              spec:
                forProvider:
                  enabledClusterLogTypes: []
                  encryptionConfig:
                    - resources:
                        - secrets
                      provider:
                        - keyArn: ""
                  region: ""
                  roleArnSelector:
                    matchControllerRef: true
                    matchLabels:
                      role: cluster
                  vpcConfig:
                    - endpointPrivateAccess: false
                      endpointPublicAccess: true
                      subnetIds: []
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: "spec.parameters.version"
                toFieldPath: "spec.forProvider.version"
              - fromFieldPath: "spec.parameters.authenticationMode"
                toFieldPath: "spec.forProvider.accessConfig[0].authenticationMode"
              - fromFieldPath: "spec.parameters.bootstrapClusterCreatorAdminPermissions"
                toFieldPath: "spec.forProvider.accessConfig[0].bootstrapClusterCreatorAdminPermissions"
              - fromFieldPath: "spec.parameters.enabledClusterLogTypes"
                toFieldPath: "spec.forProvider.enabledClusterLogTypes"
              - fromFieldPath: "spec.parameters.endpointPrivateAccess"
                toFieldPath: "spec.forProvider.vpcConfig[0].endpointPrivateAccess"
              - fromFieldPath: "spec.parameters.endpointPublicAccess"
                toFieldPath: "spec.forProvider.vpcConfig[0].endpointPublicAccess"
              - fromFieldPath: "spec.parameters.subnets"
                toFieldPath: "spec.forProvider.vpcConfig[0].subnetIds"
                policy:
                  fromFieldPath: Required
              - fromFieldPath: status.atProvider.identity[0].oidc[0].issuer
                policy:
                  fromFieldPath: Optional
                toFieldPath: status.eks.oidc
                type: ToCompositeFieldPath
              - fromFieldPath: status.atProvider.identity[0].oidc[0].issuer
                policy:
                  fromFieldPath: Optional
                toFieldPath: status.eks.oidcUri
                transforms:
                  - string:
                      trim: https://
                      type: TrimPrefix
                    type: string
                type: ToCompositeFieldPath
              - fromFieldPath: status.atProvider.vpcConfig[0].clusterSecurityGroupId
                policy:
                  fromFieldPath: Optional
                toFieldPath: status.eks.clusterSecurityGroupId
                type: ToCompositeFieldPath
              - fromFieldPath: "status.eks.clusterKeyArn"
                policy:
                  fromFieldPath: Required
                toFieldPath: spec.forProvider.encryptionConfig[0].provider[0].keyArn
                type: FromCompositeFieldPath

          - name: clusterSecurityGroupImport
            base:
              apiVersion: ec2.aws.upbound.io/v1beta1
              kind: SecurityGroup
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: status.eks.clusterSecurityGroupId
                policy:
                  fromFieldPath: Required
                toFieldPath: metadata.annotations[crossplane.io/external-name]
                type: FromCompositeFieldPath
              - fromFieldPath: spec.id
                toFieldPath: spec.forProvider.tags[eks.aws.platform.upbound.io/discovery]

          - name: kubernetesClusterAuth
            base:
              apiVersion: eks.aws.upbound.io/v1beta1
              kind: ClusterAuth
              spec:
                forProvider:
                  refreshPeriod: "2m0s"
                  clusterNameSelector:
                    matchControllerRef: true
            connectionDetails:
              - fromConnectionSecretKey: kubeconfig
                name: kubeconfig
                type: FromConnectionSecretKey
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: "spec.parameters.id"
                toFieldPath: "spec.writeConnectionSecretToRef.namespace"
                type: FromCompositeFieldPath
              - fromFieldPath: "metadata.uid"
                toFieldPath: "spec.writeConnectionSecretToRef.name"
                transforms:
                  - type: string
                    string:
                      fmt: "%s-ekscluster"
                      type: Format
                type: FromCompositeFieldPath

          - name: nodegroupRole
            base:
              apiVersion: iam.aws.upbound.io/v1beta1
              kind: Role
              metadata:
                labels:
                  role: nodegroup
              spec:
                forProvider:
                  assumeRolePolicy: |
                    {
                      "Version": "2012-10-17",
                      "Statement": [
                          {
                              "Effect": "Allow",
                              "Principal": {
                                  "Service": [
                                      "ec2.amazonaws.com"
                                  ]
                              },
                              "Action": [
                                  "sts:AssumeRole"
                              ]
                          }
                      ]
                    }
            patches:
              - type: PatchSet
                patchSetName: common-parameters-global
              - fromFieldPath: "status.atProvider.arn"
                toFieldPath: "status.eks.nodeGroupRoleArn"
                type: ToCompositeFieldPath

          - name: nodegroupWorkerNodePolicyAttachment
            base:
              apiVersion: iam.aws.upbound.io/v1beta1
              kind: RolePolicyAttachment
              spec:
                forProvider:
                  policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
                  roleSelector:
                    matchControllerRef: true
                    matchLabels:
                      role: nodegroup
            patches:
              - type: PatchSet
                patchSetName: common-parameters-global

          - name: nodegroupCniPolicyAttachment
            base:
              apiVersion: iam.aws.upbound.io/v1beta1
              kind: RolePolicyAttachment
              spec:
                forProvider:
                  policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
                  roleSelector:
                    matchControllerRef: true
                    matchLabels:
                      role: nodegroup
            patches:
              - type: PatchSet
                patchSetName: common-parameters-global

          - name: ebsCsiRolePolicyAttachment
            base:
              apiVersion: iam.aws.upbound.io/v1beta1
              kind: RolePolicyAttachment
              spec:
                forProvider:
                  policyArn: arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy
                  roleSelector:
                    matchControllerRef: true
                    matchLabels:
                      role: nodegroup
            patches:
              - type: PatchSet
                patchSetName: common-parameters-global

          - name: containerRegistryRolePolicyAttachment
            base:
              apiVersion: iam.aws.upbound.io/v1beta1
              kind: RolePolicyAttachment
              spec:
                forProvider:
                  policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
                  roleSelector:
                    matchControllerRef: true
                    matchLabels:
                      role: nodegroup
            patches:
              - type: PatchSet
                patchSetName: common-parameters-global

          - name: nodegroup
            base:
              apiVersion: eks.aws.upbound.io/v1beta1
              kind: NodeGroup
              spec:
                forProvider:
                  region: ""
                  clusterNameSelector:
                    matchControllerRef: true
                  nodeRoleArnSelector:
                    matchControllerRef: true
                    matchLabels:
                      role: nodegroup
                  scalingConfig:
                    - desiredSize: 3
                      minSize: 1
                      maxSize: 6
                  subnetIds: []
                providerConfigRef:
                  name: ""
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: "spec.parameters.subnets"
                toFieldPath: "spec.forProvider.subnetIds"
                policy:
                  fromFieldPath: Required
              - fromFieldPath: status.atProvider.clusterName
                policy:
                  fromFieldPath: Optional
                toFieldPath: status.eks.clusterName
                type: ToCompositeFieldPath

          - name: ebsCsiAddonRole
            base:
              apiVersion: iam.aws.upbound.io/v1beta1
              kind: Role
              metadata:
                labels:
                  role: ebsCsiAddon
              spec:
                forProvider:
                  assumeRolePolicy: ""
            patches:
              - type: PatchSet
                patchSetName: common-parameters-global
              - combine:
                  strategy: string
                  string:
                    fmt: |
                      {
                          "Version": "2012-10-17",
                          "Statement": [
                              {
                                  "Effect": "Allow",
                                  "Principal": {
                                      "Federated": "%s"
                                  },
                                  "Action": "sts:AssumeRoleWithWebIdentity",
                                  "Condition": {
                                      "StringEquals": {
                                          "%s:sub": "system:serviceaccount:kube-system:ebs-csi-controller-sa",
                                          "%s:aud": "sts.amazonaws.com"
                                      }
                                  }
                              }
                          ]
                      }
                  variables:
                    - fromFieldPath: status.eks.oidcArn
                    - fromFieldPath: status.eks.oidcUri
                    - fromFieldPath: status.eks.oidcUri
                policy:
                  fromFieldPath: Required
                toFieldPath: spec.forProvider.assumeRolePolicy
                type: CombineFromComposite

          - name: ebsCsiAddonRolePolicyAttachment
            base:
              apiVersion: iam.aws.upbound.io/v1beta1
              kind: RolePolicyAttachment
              spec:
                forProvider:
                  policyArn: arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy
                  roleSelector:
                    matchControllerRef: true
                    matchLabels:
                      role: ebsCsiAddon
            patches:
              - type: PatchSet
                patchSetName: common-parameters-global

          - name: ebsCsiAddon
            base:
              apiVersion: eks.aws.upbound.io/v1beta1
              kind: Addon
              spec:
                forProvider:
                  addonName: aws-ebs-csi-driver
                  clusterNameSelector:
                    matchControllerRef: true
                  serviceAccountRoleArnSelector:
                    matchControllerRef: true
                    matchLabels:
                      role: ebsCsiAddon
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: status.eks.clusterName
                policy:
                  fromFieldPath: Required
                toFieldPath: metadata.annotations[crossplane.io/external-name]
                transforms:
                  - string:
                      fmt: "%s:aws-ebs-csi-driver"
                      type: Format
                    type: string
                type: FromCompositeFieldPath

          - name: cniAddon
            base:
              apiVersion: eks.aws.upbound.io/v1beta1
              kind: Addon
              spec:
                forProvider:
                  addonName: vpc-cni
                  clusterNameSelector:
                    matchControllerRef: true
                  preserve: false
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: status.eks.clusterName
                policy:
                  fromFieldPath: Required
                toFieldPath: metadata.annotations[crossplane.io/external-name]
                transforms:
                  - string:
                      fmt: "%s:vpc-cni"
                      type: Format
                    type: string
                type: FromCompositeFieldPath

          - name: corednsAddon
            base:
              apiVersion: eks.aws.upbound.io/v1beta1
              kind: Addon
              spec:
                forProvider:
                  addonName: coredns
                  clusterNameSelector:
                    matchControllerRef: true
                  preserve: false
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: status.eks.clusterName
                policy:
                  fromFieldPath: Required
                toFieldPath: metadata.annotations[crossplane.io/external-name]
                transforms:
                  - string:
                      fmt: "%s:coredns"
                      type: Format
                    type: string
                type: FromCompositeFieldPath

          - name: kubeProxyAddon
            base:
              apiVersion: eks.aws.upbound.io/v1beta1
              kind: Addon
              spec:
                forProvider:
                  addonName: kube-proxy
                  clusterNameSelector:
                    matchControllerRef: true
                  preserve: false
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: status.eks.clusterName
                policy:
                  fromFieldPath: Required
                toFieldPath: metadata.annotations[crossplane.io/external-name]
                transforms:
                  - string:
                      fmt: "%s:kube-proxy"
                      type: Format
                    type: string
                type: FromCompositeFieldPath

          - name: podIdentityAgentAddon
            base:
              apiVersion: eks.aws.upbound.io/v1beta1
              kind: Addon
              spec:
                forProvider:
                  addonName: eks-pod-identity-agent
                  clusterNameSelector:
                    matchControllerRef: true
                  preserve: false
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: status.eks.clusterName
                policy:
                  fromFieldPath: Required
                toFieldPath: metadata.annotations[crossplane.io/external-name]
                transforms:
                  - string:
                      fmt: "%s:eks-pod-identity-agent"
                      type: Format
                    type: string
                type: FromCompositeFieldPath

          - name: csiSnapshotControllerAddon
            base:
              apiVersion: eks.aws.upbound.io/v1beta1
              kind: Addon
              spec:
                forProvider:
                  addonName: snapshot-controller
                  clusterNameSelector:
                    matchControllerRef: true
                  preserve: false
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: status.eks.clusterName
                policy:
                  fromFieldPath: Required
                toFieldPath: metadata.annotations[crossplane.io/external-name]
                transforms:
                  - string:
                      fmt: "%s:snapshot-controller"
                      type: Format
                    type: string
                type: FromCompositeFieldPath

          - name: s3MountpointAddon
            base:
              apiVersion: eks.aws.upbound.io/v1beta1
              kind: Addon
              spec:
                forProvider:
                  addonName: aws-mountpoint-s3-csi-driver
                  clusterNameSelector:
                    matchControllerRef: true
                  preserve: false
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: status.eks.clusterName
                policy:
                  fromFieldPath: Required
                toFieldPath: metadata.annotations[crossplane.io/external-name]
                transforms:
                  - string:
                      fmt: "%s:aws-mountpoint-s3-csi-driver"
                      type: Format
                    type: string
                type: FromCompositeFieldPath

          - name: efsCsiAddon
            base:
              apiVersion: eks.aws.upbound.io/v1beta1
              kind: Addon
              spec:
                forProvider:
                  addonName: aws-efs-csi-driver
                  clusterNameSelector:
                    matchControllerRef: true
                  preserve: false
            patches:
              - type: PatchSet
                patchSetName: common-parameters-regional
              - fromFieldPath: status.eks.clusterName
                policy:
                  fromFieldPath: Required
                toFieldPath: metadata.annotations[crossplane.io/external-name]
                transforms:
                  - string:
                      fmt: "%s:aws-efs-csi-driver"
                      type: Format
                    type: string
                type: FromCompositeFieldPath

          - name: oidcProvider
            base:
              apiVersion: iam.aws.upbound.io/v1beta1
              kind: OpenIDConnectProvider
              spec:
                forProvider:
                  clientIdList:
                    - sts.amazonaws.com
                  thumbprintList:
                    - 9e99a48a9960b14926bb7f3b02e22da2b0ab7280
            patches:
              - type: PatchSet
                patchSetName: common-parameters-global
              - fromFieldPath: status.eks.oidc
                policy:
                  fromFieldPath: Required
                toFieldPath: spec.forProvider.url
                type: FromCompositeFieldPath
              - fromFieldPath: status.atProvider.arn
                policy:
                  fromFieldPath: Optional
                toFieldPath: status.eks.oidcArn
                type: ToCompositeFieldPath

          - name: providerConfigHelm
            base:
              apiVersion: helm.crossplane.io/v1beta1
              kind: ProviderConfig
              spec:
                credentials:
                  source: Secret
                  secretRef:
                    name: ""
                    namespace: ""
                    key: kubeconfig
            patches:
              - fromFieldPath: spec.parameters.id
                toFieldPath: spec.credentials.secretRef.namespace
              - fromFieldPath: spec.parameters.id
                toFieldPath: metadata.name
                type: FromCompositeFieldPath
              - fromFieldPath: metadata.uid
                toFieldPath: spec.credentials.secretRef.name
                transforms:
                  - string:
                      fmt: "%s-ekscluster"
                      type: Format
                    type: string
                type: FromCompositeFieldPath
            readinessChecks:
              - type: None

          - name: providerConfigKubernetes
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha1
              kind: ProviderConfig
              spec:
                credentials:
                  secretRef:
                    key: kubeconfig
                  source: Secret
            patches:
              - fromFieldPath: spec.parameters.id
                toFieldPath: metadata.name
                type: FromCompositeFieldPath
              - fromFieldPath: spec.parameters.id
                toFieldPath: spec.credentials.secretRef.namespace
              - fromFieldPath: metadata.uid
                toFieldPath: spec.credentials.secretRef.name
                transforms:
                  - string:
                      fmt: "%s-ekscluster"
                      type: Format
                    type: string
                type: FromCompositeFieldPath
            readinessChecks:
              - type: None

          - name: awsAuth
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                deletionPolicy: Orphan
                forProvider:
                  manifest:
                    apiVersion: v1
                    kind: ConfigMap
                    metadata:
                      name: aws-auth
                      namespace: kube-system
            patches:
              - fromFieldPath: spec.parameters.id
                toFieldPath: spec.providerConfigRef.name
                type: FromCompositeFieldPath
              - fromFieldPath: spec.parameters.id
                toFieldPath: metadata.name
                transforms:
                  - string:
                      fmt: "%s-aws-auth"
                      type: Format
                    type: string
                type: FromCompositeFieldPath
              - combine:
                  strategy: string
                  string:
                    fmt: |
                      - groups:
                        - system:bootstrappers
                        - system:nodes
                        rolearn: %s
                        username: system:node:{{ "{{EC2PrivateDNSName}}" }}
                      - groups:
                        - system:masters
                        rolearn: %s
                        username: adminrole
                  variables:
                    - fromFieldPath: status.eks.nodeGroupRoleArn
                    - fromFieldPath: spec.parameters.iam.clusterAdminRoleArn
                policy:
                  fromFieldPath: Required
                toFieldPath: spec.forProvider.manifest.data.mapRoles
                type: CombineFromComposite
              - combine:
                  strategy: string
                  string:
                    fmt: |
                      - groups:
                        - system:masters
                        userarn: %s
                        username: adminuser
                  variables:
                    - fromFieldPath: spec.parameters.iam.clusterAdminUserArn
                policy:
                  fromFieldPath: Optional
                toFieldPath: spec.forProvider.manifest.data.mapUsers
                type: CombineFromComposite

          - name: awsLoadBalancerControllerAddonPolicy
            base:
              apiVersion: iam.aws.upbound.io/v1beta1
              kind: Policy
              metadata:
                labels:
                  policy: awsLoadBalancerControllerAddon
              spec:
                forProvider:
                  policy: |
                    {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "iam:CreateServiceLinkedRole"
                                ],
                                "Resource": "*",
                                "Condition": {
                                    "StringEquals": {
                                        "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
                                    }
                                }
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "ec2:DescribeAccountAttributes",
                                    "ec2:DescribeAddresses",
                                    "ec2:DescribeAvailabilityZones",
                                    "ec2:DescribeInternetGateways",
                                    "ec2:DescribeVpcs",
                                    "ec2:DescribeVpcPeeringConnections",
                                    "ec2:DescribeSubnets",
                                    "ec2:DescribeSecurityGroups",
                                    "ec2:DescribeInstances",
                                    "ec2:DescribeNetworkInterfaces",
                                    "ec2:DescribeTags",
                                    "ec2:GetCoipPoolUsage",
                                    "ec2:DescribeCoipPools",
                                    "elasticloadbalancing:DescribeLoadBalancers",
                                    "elasticloadbalancing:DescribeLoadBalancerAttributes",
                                    "elasticloadbalancing:DescribeListeners",
                                    "elasticloadbalancing:DescribeListenerCertificates",
                                    "elasticloadbalancing:DescribeSSLPolicies",
                                    "elasticloadbalancing:DescribeRules",
                                    "elasticloadbalancing:DescribeTargetGroups",
                                    "elasticloadbalancing:DescribeTargetGroupAttributes",
                                    "elasticloadbalancing:DescribeTargetHealth",
                                    "elasticloadbalancing:DescribeTags",
                                    "elasticloadbalancing:DescribeTrustStores"
                                ],
                                "Resource": "*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "cognito-idp:DescribeUserPoolClient",
                                    "acm:ListCertificates",
                                    "acm:DescribeCertificate",
                                    "iam:ListServerCertificates",
                                    "iam:GetServerCertificate",
                                    "waf-regional:GetWebACL",
                                    "waf-regional:GetWebACLForResource",
                                    "waf-regional:AssociateWebACL",
                                    "waf-regional:DisassociateWebACL",
                                    "wafv2:GetWebACL",
                                    "wafv2:GetWebACLForResource",
                                    "wafv2:AssociateWebACL",
                                    "wafv2:DisassociateWebACL",
                                    "shield:GetSubscriptionState",
                                    "shield:DescribeProtection",
                                    "shield:CreateProtection",
                                    "shield:DeleteProtection"
                                ],
                                "Resource": "*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "ec2:AuthorizeSecurityGroupIngress",
                                    "ec2:RevokeSecurityGroupIngress"
                                ],
                                "Resource": "*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "ec2:CreateSecurityGroup"
                                ],
                                "Resource": "*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "ec2:CreateTags"
                                ],
                                "Resource": "arn:aws:ec2:*:*:security-group/*",
                                "Condition": {
                                    "StringEquals": {
                                        "ec2:CreateAction": "CreateSecurityGroup"
                                    },
                                    "Null": {
                                        "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                                    }
                                }
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "ec2:CreateTags",
                                    "ec2:DeleteTags"
                                ],
                                "Resource": "arn:aws:ec2:*:*:security-group/*",
                                "Condition": {
                                    "Null": {
                                        "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                                        "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                                    }
                                }
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "ec2:AuthorizeSecurityGroupIngress",
                                    "ec2:RevokeSecurityGroupIngress",
                                    "ec2:DeleteSecurityGroup"
                                ],
                                "Resource": "*",
                                "Condition": {
                                    "Null": {
                                        "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                                    }
                                }
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "elasticloadbalancing:CreateLoadBalancer",
                                    "elasticloadbalancing:CreateTargetGroup"
                                ],
                                "Resource": "*",
                                "Condition": {
                                    "Null": {
                                        "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                                    }
                                }
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "elasticloadbalancing:CreateListener",
                                    "elasticloadbalancing:DeleteListener",
                                    "elasticloadbalancing:CreateRule",
                                    "elasticloadbalancing:DeleteRule"
                                ],
                                "Resource": "*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "elasticloadbalancing:AddTags",
                                    "elasticloadbalancing:RemoveTags"
                                ],
                                "Resource": [
                                    "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                                    "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                                    "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*"
                                ],
                                "Condition": {
                                    "Null": {
                                        "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                                        "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                                    }
                                }
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "elasticloadbalancing:AddTags",
                                    "elasticloadbalancing:RemoveTags"
                                ],
                                "Resource": [
                                    "arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*",
                                    "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*",
                                    "arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*",
                                    "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*"
                                ]
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "elasticloadbalancing:ModifyLoadBalancerAttributes",
                                    "elasticloadbalancing:SetIpAddressType",
                                    "elasticloadbalancing:SetSecurityGroups",
                                    "elasticloadbalancing:SetSubnets",
                                    "elasticloadbalancing:DeleteLoadBalancer",
                                    "elasticloadbalancing:ModifyTargetGroup",
                                    "elasticloadbalancing:ModifyTargetGroupAttributes",
                                    "elasticloadbalancing:DeleteTargetGroup"
                                ],
                                "Resource": "*",
                                "Condition": {
                                    "Null": {
                                        "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                                    }
                                }
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "elasticloadbalancing:AddTags"
                                ],
                                "Resource": [
                                    "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                                    "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                                    "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*"
                                ],
                                "Condition": {
                                    "StringEquals": {
                                        "elasticloadbalancing:CreateAction": [
                                            "CreateTargetGroup",
                                            "CreateLoadBalancer"
                                        ]
                                    },
                                    "Null": {
                                        "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                                    }
                                }
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "elasticloadbalancing:RegisterTargets",
                                    "elasticloadbalancing:DeregisterTargets"
                                ],
                                "Resource": "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "elasticloadbalancing:SetWebAcl",
                                    "elasticloadbalancing:ModifyListener",
                                    "elasticloadbalancing:AddListenerCertificates",
                                    "elasticloadbalancing:RemoveListenerCertificates",
                                    "elasticloadbalancing:ModifyRule"
                                ],
                                "Resource": "*"
                            }
                        ]
                    }
            patches:
              - type: PatchSet
                patchSetName: common-parameters-global

          - name: awsLoadBalancerControllerAddonRole
            base:
              apiVersion: iam.aws.upbound.io/v1beta1
              kind: Role
              metadata:
                labels:
                  role: awsLoadBalancerControllerAddon
              spec:
                forProvider:
                  assumeRolePolicy: ""
            patches:
              - type: PatchSet
                patchSetName: common-parameters-global
              - fromFieldPath: "status.atProvider.arn"
                toFieldPath: "status.eks.awsLoadBalancerControllerAddonRoleArn"
                type: ToCompositeFieldPath
              - combine:
                  strategy: string
                  string:
                    fmt: |
                      {
                          "Version": "2012-10-17",
                          "Statement": [
                              {
                                  "Effect": "Allow",
                                  "Principal": {
                                      "Federated": "%s"
                                  },
                                  "Action": "sts:AssumeRoleWithWebIdentity",
                                  "Condition": {
                                      "StringEquals": {
                                          "%s:sub": "system:serviceaccount:kube-system:aws-load-balancer-controller-sa",
                                          "%s:aud": "sts.amazonaws.com"
                                      }
                                  }
                              }
                          ]
                      }
                  variables:
                    - fromFieldPath: status.eks.oidcArn
                    - fromFieldPath: status.eks.oidcUri
                    - fromFieldPath: status.eks.oidcUri
                policy:
                  fromFieldPath: Required
                toFieldPath: spec.forProvider.assumeRolePolicy
                type: CombineFromComposite

          - name: awsLoadBalancerControllerAddonRolePolicyAttachment
            base:
              apiVersion: iam.aws.upbound.io/v1beta1
              kind: RolePolicyAttachment
              spec:
                forProvider:
                  policyArnSelector:
                    matchControllerRef: true
                    matchLabels:
                      policy: awsLoadBalancerControllerAddon
                  roleSelector:
                    matchControllerRef: true
                    matchLabels:
                      role: awsLoadBalancerControllerAddon
            patches:
              - type: PatchSet
                patchSetName: common-parameters-global

          - name: awsLoadBalancerControllerAddonServiceAccount
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                deletionPolicy: Orphan
                forProvider:
                  manifest:
                    apiVersion: v1
                    kind: ServiceAccount
                    metadata:
                      name: aws-load-balancer-controller-sa
                      namespace: kube-system
            patches:
              - fromFieldPath: spec.parameters.id
                toFieldPath: spec.providerConfigRef.name
                type: FromCompositeFieldPath
              - fromFieldPath: status.eks.awsLoadBalancerControllerAddonRoleArn
                toFieldPath: spec.forProvider.manifest.metadata.annotations[eks.amazonaws.com/role-arn]
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required

          - name: awsLoadBalancerControllerAddon
            base:
              apiVersion: helm.crossplane.io/v1beta1
              kind: Release
              metadata:
                annotations:
                  crossplane.io/external-name: aws-load-balancer-controller
              spec:
                forProvider:
                  chart:
                    name: aws-load-balancer-controller
                    repository: https://aws.github.io/eks-charts
                    version: 1.7.1
                  namespace: kube-system
                  set:
                    - name: clusterName
                      value: ""
                    - name: serviceAccount.create
                      value: "false"
                    - name: serviceAccount.name
                      value: aws-load-balancer-controller-sa
                  values:
                    image:
                      pullPolicy: IfNotPresent
            patches:
              - fromFieldPath: spec.parameters.id
                toFieldPath: spec.providerConfigRef.name
                type: FromCompositeFieldPath
              - fromFieldPath: status.eks.clusterName
                toFieldPath: spec.forProvider.set[0].value
                type: FromCompositeFieldPath
              - fromFieldPath: "status.atProvider.state"
                toFieldPath: "status.eks.awsLoadBalancerControllerReleaseStatus"
                type: ToCompositeFieldPath

          {{ if .Values.prometheus.enabled -}}
          - name: prometheusStackAddon
            base:
              apiVersion: helm.crossplane.io/v1beta1
              kind: Release
              metadata:
                annotations:
                  crossplane.io/external-name: prometheus-stack-addon
              spec:
                forProvider:
                  chart:
                    name: {{ .Values.prometheus.name }}
                    repository: https://prometheus-community.github.io/helm-charts
                    version: {{ .Values.prometheus.version }}
                  namespace: {{ .Values.prometheus.namespace }}
                  values:
                    global:
                      rbac:
                        create: true
                    crds:
                      enabled: true
                    prometheus:
                      service:
                        type: "LoadBalancer"
                      additionalPodMonitors:
                        - name: "crossplane"
                          namespaceSelector:
                            matchNames:
                              - "crossplane-system"
                          podMetricsEndpoints:
                            - port: "metrics"
                          selector: {}
                        - name: "argocd"
                          namespaceSelector:
                            matchNames:
                              - "argocd"
                          podMetricsEndpoints:
                            - port: "metrics"
                          selector: {}
                    grafana:
                      service:
                        type: "LoadBalancer"
                      resources:
                        requests:
                          cpu: "100m"
                          memory: "1Gi"
                        limits:
                          cpu: "1"
                          memory: "2Gi"
                      datasources:
                        datasources.yaml:
                          apiVersion: 1
                          datasources:
                            - name: Prometheus
                              type: prometheus
                              access: proxy
                              url: http://prometheus-stack-addon-kub-prometheus.kube-prometheus-stack:9090/
                              isDefault: false
                              uid: prometheusdatasource
                          deleteDatasources:
                            - name: Prometheus
                      dashboardProviders:
                        dashboardproviders.yaml:
                          apiVersion: 1
                          providers:
                            - name: "default"
                              orgId: 1
                              type: file
                              disableDeletion: false
                              editable: true
                              options:
                                path: /var/lib/grafana/dashboards/default
                      dashboards:
                        default:
                          crossplane:
                            gnetId: 19747
                            revision: 5
                            datasource: prometheusdatasource
            patches:
              - fromFieldPath: spec.parameters.id
                toFieldPath: spec.providerConfigRef.name
                type: FromCompositeFieldPath
              - fromFieldPath: status.eks.awsLoadBalancerControllerReleaseStatus
                toFieldPath: metadata.annotations["albControllerReleaseStatus"]
                transforms:
                  - type: match
                    match:
                      patterns:
                        - type: literal
                          literal: "deployed"
                          result: "SuccessDeploy"
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required
              - fromFieldPath: "status.atProvider.state"
                toFieldPath: "status.eks.prometheusStackReleaseStatus"
                type: ToCompositeFieldPath

          - name: prometheusAdapterAddon
            base:
              apiVersion: helm.crossplane.io/v1beta1
              kind: Release
              metadata:
                annotations:
                  crossplane.io/external-name: prometheus-adapter-addon
              spec:
                forProvider:
                  chart:
                    name: {{ .Values.prometheus.prometheusAdapter.name }}
                    repository: https://prometheus-community.github.io/helm-charts
                    version: {{ .Values.prometheus.prometheusAdapter.version }}
                  namespace: {{ .Values.prometheus.prometheusAdapter.namespace }}
                  values:
                    image:
                      pullPolicy: IfNotPresent
                    logLevel: 4
                    metricsRelistInterval: 1m
                    listenPort: 6443
                    prometheus:
                      url: http://prometheus-stack-addon-kub-prometheus.kube-prometheus-stack.svc
                      port: 9090
                      path: ""
                    replicas: 1
                    podSecurityContext:
                      fsGroup: 10001
                    securityContext:
                      allowPrivilegeEscalation: false
                      capabilities:
                        drop: ["ALL"]
                      readOnlyRootFilesystem: true
                      runAsNonRoot: true
                      runAsUser: 10001
                      seccompProfile:
                        type: RuntimeDefault
                    rbac:
                      create: true
                      useAuthReaderClusterRole: false
                      externalMetrics:
                        resources: ["*"]
                      customMetrics:
                        resources: ["*"]
                    psp:
                      create: false
                    serviceAccount:
                      create: true
                    livenessProbe:
                      httpGet:
                        path: /healthz
                        port: https
                        scheme: HTTPS
                      initialDelaySeconds: 30
                      timeoutSeconds: 5
                    readinessProbe:
                      httpGet:
                        path: /healthz
                        port: https
                        scheme: HTTPS
                      initialDelaySeconds: 30
                      timeoutSeconds: 5
                    rules:
                      default: true
                      resource:
                        cpu:
                          containerQuery: |
                            sum by (<<.GroupBy>>) (
                              rate(container_cpu_usage_seconds_total{container!="",<<.LabelMatchers>>}[3m])
                            )
                          nodeQuery: |
                            sum  by (<<.GroupBy>>) (
                              rate(node_cpu_seconds_total{mode!="idle",mode!="iowait",mode!="steal",<<.LabelMatchers>>}[3m])
                            )
                          resources:
                            overrides:
                              node:
                                resource: node
                              namespace:
                                resource: namespace
                              pod:
                                resource: pod
                          containerLabel: container
                        memory:
                          containerQuery: |
                            sum by (<<.GroupBy>>) (
                              avg_over_time(container_memory_working_set_bytes{container!="",<<.LabelMatchers>>}[3m])
                            )
                          nodeQuery: |
                            sum by (<<.GroupBy>>) (
                              avg_over_time(node_memory_MemTotal_bytes{<<.LabelMatchers>>}[3m])
                              -
                              avg_over_time(node_memory_MemAvailable_bytes{<<.LabelMatchers>>}[3m])
                            )
                          resources:
                            overrides:
                              node:
                                resource: node
                              namespace:
                                resource: namespace
                              pod:
                                resource: pod
                          containerLabel: container
                        window: 3m
                    service:
                      annotations: {}
                      port: 443
                      type: ClusterIP
                      ipDualStack:
                        enabled: false
                        ipFamilies: ["IPv6", "IPv4"]
                        ipFamilyPolicy: "PreferDualStack"
                    tls:
                      enable: false
                      ca: |-
                        # Public CA file that signed the APIService
                      key: |-
                        # Private key of the APIService
                      certificate: |-
                        # Public key of the APIService
                    hostNetwork:
                      enabled: false
                    strategy:
                      type: RollingUpdate
                      rollingUpdate:
                        maxUnavailable: 25%
                        maxSurge: 25%
                    podDisruptionBudget:
                      enabled: false
                      minAvailable:
                      maxUnavailable: 1
                    certManager:
                      enabled: false
                      caCertDuration: 43800h0m0s
                      certDuration: 8760h0m0s
            patches:
              - fromFieldPath: spec.parameters.id
                toFieldPath: spec.providerConfigRef.name
                type: FromCompositeFieldPath
              - fromFieldPath: status.eks.prometheusStackReleaseStatus
                toFieldPath: metadata.annotations["prometheusStackReleaseStatus"]
                transforms:
                  - type: match
                    match:
                      patterns:
                        - type: literal
                          literal: "deployed"
                          result: "SuccessDeploy"
                type: FromCompositeFieldPath
                policy:
                  fromFieldPath: Required
          {{- end }}

          - name: crossplaneAddon
            base:
              apiVersion: helm.crossplane.io/v1beta1
              kind: Release
              metadata:
                annotations:
                  crossplane.io/external-name: crossplane
              spec:
                forProvider:
                  chart:
                    name: crossplane
                    repository: https://charts.crossplane.io/stable
                    version: {{ .Values.crossplane.version }}
                  namespace: {{ .Values.crossplane.namespace }}
                  values:
                    cluster_role: cluster-admin
                    service_account: {{ .Values.crossplane.serviceAccount }}
                    args:
                      - "--enable-environment-configs"
                    metrics:
                      enabled: true
                    resourcesCrossplane:
                      limits:
                        cpu: "1"
                        memory: "2Gi"
                      requests:
                        cpu: "100m"
                        memory: "1Gi"
                    resourcesRBACManager:
                      limits:
                        cpu: "500m"
                        memory: "1Gi"
                      requests:
                        cpu: "100m"
                        memory: "512Mi"
            patches:
              - fromFieldPath: spec.parameters.id
                toFieldPath: spec.providerConfigRef.name
                type: FromCompositeFieldPath
              - fromFieldPath: spec.parameters.crossplaneVersion
                toFieldPath: spec.forProvider.chart.version
                type: FromCompositeFieldPath
              - fromFieldPath: "status.atProvider.state"
                toFieldPath: "status.eks.crossplaneAddonReleaseStatus"
                type: ToCompositeFieldPath

          - name: crossplaneAddonClusterRoleBinding
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                deletionPolicy: Orphan
                forProvider:
                  manifest:
                    apiVersion: rbac.authorization.k8s.io/v1
                    kind: ClusterRoleBinding
                    metadata:
                      name: {{ .Values.crossplane.name }}-binding
                    subjects:
                      - kind: ServiceAccount
                        name: {{ .Values.crossplane.serviceAccount }}
                        namespace: {{ .Values.crossplane.namespace }}
                    roleRef:
                      kind: ClusterRole
                      name: cluster-admin
                      apiGroup: rbac.authorization.k8s.io
            patches:
              - fromFieldPath: spec.parameters.id
                toFieldPath: spec.providerConfigRef.name
                type: FromCompositeFieldPath

          - name: crossplaneAddonEnvironmentConfig
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                deletionPolicy: Orphan
                forProvider:
                  manifest:
                    apiVersion: apiextensions.crossplane.io/v1alpha1
                    kind: EnvironmentConfig
                    metadata:
                      name: cluster
                    data:
                      awsAccountID: ""
                      eksOIDC: ""
            patches:
              - fromFieldPath: spec.parameters.id
                toFieldPath: spec.providerConfigRef.name
                type: FromCompositeFieldPath
              - fromFieldPath: status.eks.accountId
                toFieldPath: spec.forProvider.manifest.data.awsAccountID
                type: FromCompositeFieldPath
              - fromFieldPath: status.eks.oidcUri
                toFieldPath: spec.forProvider.manifest.data.eksOIDC
                type: FromCompositeFieldPath

          - name: crossplaneProvidersAddonRole
            base:
              apiVersion: iam.aws.upbound.io/v1beta1
              kind: Role
              metadata:
                labels:
                  role: crossplaneProvidersAddon
              spec:
                forProvider:
                  assumeRolePolicy: ""
            patches:
              - type: PatchSet
                patchSetName: common-parameters-global
              - combine:
                  strategy: string
                  string:
                    fmt: |
                      {
                          "Version": "2012-10-17",
                          "Statement": [
                              {
                                  "Effect": "Allow",
                                  "Principal": {
                                      "Federated": "%s"
                                  },
                                  "Action": "sts:AssumeRoleWithWebIdentity",
                                  "Condition": {
                                      "StringEquals": {
                                          "%s:sub": "system:serviceaccount:crossplane-system:provider-*",
                                          "%s:aud": "sts.amazonaws.com"
                                      }
                                  }
                              }
                          ]
                      }
                  variables:
                    - fromFieldPath: status.eks.oidcArn
                    - fromFieldPath: status.eks.oidcUri
                    - fromFieldPath: status.eks.oidcUri
                policy:
                  fromFieldPath: Required
                toFieldPath: spec.forProvider.assumeRolePolicy
                type: CombineFromComposite
              - fromFieldPath: "status.atProvider.arn"
                toFieldPath: "status.eks.crossplaneProvidersRoleArn"
                type: ToCompositeFieldPath

          - name: crossplaneProvidersAddonRolePolicyAttachment
            base:
              apiVersion: iam.aws.upbound.io/v1beta1
              kind: RolePolicyAttachment
              spec:
                forProvider:
                  policyArn: arn:aws:iam::aws:policy/AdministratorAccess
                  roleSelector:
                    matchControllerRef: true
                    matchLabels:
                      role: crossplaneProvidersAddon
            patches:
              - type: PatchSet
                patchSetName: common-parameters-global

          {{ if .Values.providerUpboundAws.enabled -}}
          - name: crossplaneUpjetProviderRuntimeConfig
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                deletionPolicy: Orphan
                forProvider:
                  manifest:
                    apiVersion: pkg.crossplane.io/v1beta1
                    kind: DeploymentRuntimeConfig
                    metadata:
                      name: {{ .Values.providerUpboundAws.name }}-runtime-config
                    spec:
                      deploymentTemplate:
                        spec:
                          replicas: 1
                          selector: {}
                          template:
                            spec:
                              containers:
                                - name: package-runtime
                                  args:
                                    - --debug
                              securityContext:
                                fsGroup: 2000
                      serviceAccountTemplate:
                        metadata:
                          annotations:
                            eks.amazonaws.com/role-arn: ""
            patches:
              - fromFieldPath: spec.parameters.id
                toFieldPath: spec.providerConfigRef.name
                type: FromCompositeFieldPath
              - fromFieldPath: status.eks.crossplaneProvidersRoleArn
                toFieldPath: spec.forProvider.manifest.spec.serviceAccountTemplate.metadata.annotations[eks.amazonaws.com/role-arn]
                type: FromCompositeFieldPath

          - name: crossplaneUpjetProvider
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                deletionPolicy: Orphan
                forProvider:
                  manifest:
                    apiVersion: pkg.crossplane.io/v1
                    kind: Provider
                    metadata:
                      name: provider-{{ .Values.providerUpboundAws.name }}
                    spec:
                      package: ""
                      runtimeConfigRef:
                        name: {{ .Values.providerUpboundAws.name }}-runtime-config
            patches:
              - fromFieldPath: spec.parameters.id
                toFieldPath: spec.providerConfigRef.name
                type: FromCompositeFieldPath
              - fromFieldPath: spec.parameters.upjetProviderVersion
                toFieldPath: spec.forProvider.manifest.spec.package
                transforms:
                  - string:
                      fmt: "xpkg.upbound.io/upbound/provider-family-aws:%s"
                      type: Format
                    type: string
                type: FromCompositeFieldPath

          {{ range .Values.providerUpboundAws.families -}}
          - name: crossplaneUpjetAws{{ . | title }}Provider
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                deletionPolicy: Orphan
                forProvider:
                  manifest:
                    apiVersion: pkg.crossplane.io/v1
                    kind: Provider
                    metadata:
                      name: provider-upjet-aws-{{ . }}
                    spec:
                      package: ""
                      runtimeConfigRef:
                        name: upjet-aws-runtime-config
            patches:
              - fromFieldPath: spec.parameters.id
                toFieldPath: spec.providerConfigRef.name
                type: FromCompositeFieldPath
              - fromFieldPath: spec.parameters.upjetProviderVersion
                toFieldPath: spec.forProvider.manifest.spec.package
                transforms:
                  - string:
                      fmt: "xpkg.upbound.io/upbound/provider-aws-{{ . }}:%s"
                      type: Format
                    type: string
                type: FromCompositeFieldPath
          {{- end }}

          - name: crossplaneUpjetProviderConfig
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                deletionPolicy: Orphan
                forProvider:
                  manifest:
                    apiVersion: aws.upbound.io/v1beta1
                    kind: ProviderConfig
                    metadata:
                      name: upjet-aws-provider-config
                    spec:
                      credentials:
                        source: IRSA
            patches:
              - fromFieldPath: spec.parameters.id
                toFieldPath: spec.providerConfigRef.name
                type: FromCompositeFieldPath
          {{- end }}

          {{ if .Values.providerKubernetes.enabled -}}
          - name: crossplaneKubernetesProviderServiceAccount
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                deletionPolicy: Orphan
                forProvider:
                  manifest:
                    apiVersion: v1
                    kind: ServiceAccount
                    metadata:
                      name: {{ .Values.providerKubernetes.serviceAccount }}
                      namespace: {{ .Values.crossplane.namespace }}
            patches:
              - fromFieldPath: spec.parameters.id
                toFieldPath: spec.providerConfigRef.name
                type: FromCompositeFieldPath

          - name: crossplaneKubernetesProviderClusterRoleBinding
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                deletionPolicy: Orphan
                forProvider:
                  manifest:
                    apiVersion: rbac.authorization.k8s.io/v1
                    kind: ClusterRoleBinding
                    metadata:
                      name: {{ .Values.providerKubernetes.name }}-binding
                    subjects:
                      - kind: ServiceAccount
                        name: {{ .Values.providerKubernetes.serviceAccount }}
                        namespace: {{ .Values.crossplane.namespace }}
                    roleRef:
                      kind: ClusterRole
                      name: cluster-admin
                      apiGroup: rbac.authorization.k8s.io
            patches:
              - fromFieldPath: spec.parameters.id
                toFieldPath: spec.providerConfigRef.name
                type: FromCompositeFieldPath

          - name: crossplaneKubernetesProviderRuntimeConfig
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                deletionPolicy: Orphan
                forProvider:
                  manifest:
                    apiVersion: pkg.crossplane.io/v1beta1
                    kind: DeploymentRuntimeConfig
                    metadata:
                      name: {{ .Values.providerKubernetes.name }}-runtime-config
                    spec:
                      deploymentTemplate:
                        spec:
                          replicas: 1
                          selector: {}
                          template: {}
                      serviceAccountTemplate:
                        metadata:
                          name: {{ .Values.providerKubernetes.serviceAccount }}
            patches:
              - fromFieldPath: spec.parameters.id
                toFieldPath: spec.providerConfigRef.name
                type: FromCompositeFieldPath

          - name: crossplaneKubernetesProvider
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                deletionPolicy: Orphan
                forProvider:
                  manifest:
                    apiVersion: pkg.crossplane.io/v1
                    kind: Provider
                    metadata:
                      name: provider-{{ .Values.providerKubernetes.name }}
                    spec:
                      package: ""
                      runtimeConfigRef:
                        name: {{ .Values.providerKubernetes.name }}-runtime-config
            patches:
              - fromFieldPath: spec.parameters.id
                toFieldPath: spec.providerConfigRef.name
                type: FromCompositeFieldPath
              - fromFieldPath: spec.parameters.kubernetesProviderVersion
                toFieldPath: spec.forProvider.manifest.spec.package
                transforms:
                  - string:
                      fmt: "xpkg.upbound.io/crossplane-contrib/provider-kubernetes:%s"
                      type: Format
                    type: string
                type: FromCompositeFieldPath

          - name: crossplaneKubernetesProviderConfig
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                deletionPolicy: Orphan
                forProvider:
                  manifest:
                    apiVersion: kubernetes.crossplane.io/v1alpha1
                    kind: ProviderConfig
                    metadata:
                      name: {{ .Values.providerKubernetes.name }}-provider-config
                    spec:
                      credentials:
                        source: InjectedIdentity
            patches:
              - fromFieldPath: spec.parameters.id
                toFieldPath: spec.providerConfigRef.name
                type: FromCompositeFieldPath
          {{- end }}

          {{ if .Values.providerHelm.enabled -}}
          - name: crossplaneHelmProviderServiceAccount
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                deletionPolicy: Orphan
                forProvider:
                  manifest:
                    apiVersion: v1
                    kind: ServiceAccount
                    metadata:
                      name: {{ .Values.providerHelm.serviceAccount }}
                      namespace: {{ .Values.crossplane.namespace }}
            patches:
              - fromFieldPath: spec.parameters.id
                toFieldPath: spec.providerConfigRef.name
                type: FromCompositeFieldPath

          - name: crossplaneHelmProviderClusterRoleBinding
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                deletionPolicy: Orphan
                forProvider:
                  manifest:
                    apiVersion: rbac.authorization.k8s.io/v1
                    kind: ClusterRoleBinding
                    metadata:
                      name: {{ .Values.providerHelm.name }}-binding
                    subjects:
                      - kind: ServiceAccount
                        name: {{ .Values.providerHelm.serviceAccount }}
                        namespace: {{ .Values.crossplane.namespace }}
                    roleRef:
                      kind: ClusterRole
                      name: cluster-admin
                      apiGroup: rbac.authorization.k8s.io
            patches:
              - fromFieldPath: spec.parameters.id
                toFieldPath: spec.providerConfigRef.name
                type: FromCompositeFieldPath

          - name: crossplaneHelmProviderRuntimeConfig
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                deletionPolicy: Orphan
                forProvider:
                  manifest:
                    apiVersion: pkg.crossplane.io/v1beta1
                    kind: DeploymentRuntimeConfig
                    metadata:
                      name: {{ .Values.providerHelm.name }}-runtime-config
                    spec:
                      deploymentTemplate:
                        spec:
                          replicas: 1
                          selector: {}
                          template: {}
                      serviceAccountTemplate:
                        metadata:
                          name: {{ .Values.providerHelm.serviceAccount }}
            patches:
              - fromFieldPath: spec.parameters.id
                toFieldPath: spec.providerConfigRef.name
                type: FromCompositeFieldPath

          - name: crossplaneHelmProvider
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                deletionPolicy: Orphan
                forProvider:
                  manifest:
                    apiVersion: pkg.crossplane.io/v1
                    kind: Provider
                    metadata:
                      name: provider-{{ .Values.providerHelm.name }}
                    spec:
                      package: ""
                      runtimeConfigRef:
                        name: {{ .Values.providerHelm.name }}-runtime-config
            patches:
              - fromFieldPath: spec.parameters.id
                toFieldPath: spec.providerConfigRef.name
                type: FromCompositeFieldPath
              - fromFieldPath: spec.parameters.helmProviderVersion
                toFieldPath: spec.forProvider.manifest.spec.package
                transforms:
                  - string:
                      fmt: "xpkg.upbound.io/crossplane-contrib/provider-helm:%s"
                      type: Format
                    type: string
                type: FromCompositeFieldPath

          - name: crossplaneHelmProviderConfig
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                deletionPolicy: Orphan
                forProvider:
                  manifest:
                    apiVersion: helm.crossplane.io/v1beta1
                    kind: ProviderConfig
                    metadata:
                      name: {{ .Values.providerHelm.name }}-provider-config
                    spec:
                      credentials:
                        source: InjectedIdentity
            patches:
              - fromFieldPath: spec.parameters.id
                toFieldPath: spec.providerConfigRef.name
                type: FromCompositeFieldPath
          {{- end }}

          {{ if .Values.argocd.enabled -}}
          - name: argoCdAddon
            base:
              apiVersion: helm.crossplane.io/v1beta1
              kind: Release
              metadata:
                annotations:
                  crossplane.io/external-name: argocd
              spec:
                forProvider:
                  chart:
                    name: {{ .Values.argocd.name }}
                    repository: https://argoproj.github.io/argo-helm
                    version: {{ .Values.argocd.version }}
                  namespace: {{ .Values.argocd.namespace }}
                  values:
                    dex:
                      enabled: true
                    redis-ha:
                      enabled: true
                    controller:
                      replicas: 1 # Additional replicas will cause sharding of managed clusters across number of replicas.
                      metrics:
                        enabled: true
                        service:
                          annotations:
                            prometheus.io/scrape: true
                      env:
                        - name: ARGOCD_K8S_CLIENT_QPS #required for Crossplane too many CRDs https://github.com/argoproj/argo-cd/pull/448
                          value: "300"
                    repoServer:
                      autoscaling:
                        enabled: true
                        minReplicas: 1
                      resources: # Adjust based on your specific use case (required for HPA)
                        requests:
                          cpu: "100m"
                          memory: "256Mi"
                        limits:
                          cpu: "200m"
                          memory: "512Mi"
                      metrics:
                        enabled: true
                        service:
                          annotations:
                            prometheus.io/scrape: true
                    applicationSet:
                      replicaCount: 1 # The controller doesn't scale horizontally, is active-standby replicas
                      metrics:
                        enabled: true
                        service:
                          annotations:
                            prometheus.io/scrape: true
                    notifications:
                      enabled: false
                    server:
                      autoscaling:
                        enabled: true
                        minReplicas: 1
                      resources: # Adjust based on your specific use case (required for HPA)
                        requests:
                          cpu: "100m"
                          memory: "256Mi"
                        limits:
                          cpu: "200m"
                          memory: "512Mi"
                      metrics:
                        enabled: true
                        service:
                          annotations:
                            prometheus.io/scrape: true
                      service:
                        type: "LoadBalancer"
                        annotations:
                          service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
                    configs:
                      params:
                        controller.repo.server.plaintext: "false"
                        controller.repo.server.strict.tls: "false"
                        controller.log.format: json
                        controller.log.level: info
                        server.insecure: "false"
                        server.log.format: json
                        server.log.level: info
                        server.repo.server.plaintext: "false"
                        server.repo.server.strict.tls: "false"
                        server.dex.server.plaintext: "false"
                        server.dex.server.strict.tls: "false"
                        server.disable.auth: "false"
                        server.tls.minversion: "1.2"
                        server.tls.maxversion: "1.3"
                        server.enable.proxy.extension: "false"
                        reposerver.log.format: json
                        reposerver.log.level: info
                        reposerver.disable.tls: "false"
                        reposerver.tls.minversion: "1.2"
                        reposerver.tls.maxversion: "1.3"
                        dexserver.disable.tls: "false"
                      cm:
                        admin.enabled: "true"
                        users.anonymous.enabled: "false"
                        kustomize.buildOptions: "--enable-helm"
                        application.resourceTrackingMethod: "annotation" #use annotation for tracking required for Crossplane
                        resource.exclusions: |
                          - kinds:
                            - ProviderConfigUsage
                            apiGroups:
                            - "*"
                        resource.customizations: |
                          "awsblueprints.io/*":
                            health.lua: |
                              health_status = {
                                status = "Progressing",
                                message = "Provisioning ..."
                              }

                              if obj.status == nil or obj.status.conditions == nil then
                                return health_status
                              end

                              for i, condition in ipairs(obj.status.conditions) do
                                if condition.type == "LastAsyncOperation" then
                                  if condition.status == "False" then
                                    health_status.status = "Degraded"
                                    health_status.message = condition.message
                                    return health_status
                                  end
                                end

                                if condition.type == "Synced" then
                                  if condition.status == "False" then
                                    health_status.status = "Degraded"
                                    health_status.message = condition.message
                                    return health_status
                                  end
                                end

                                if condition.type == "Ready" then
                                  if condition.status == "True" then
                                    health_status.status = "Healthy"
                                    health_status.message = "Resource is up-to-date."
                                    return health_status
                                  end
                                end
                              end

                              return health_status
                          "*.upbound.io/*":
                            health.lua: |
                              health_status = {
                                status = "Progressing",
                                message = "Provisioning ..."
                              }

                              local function contains (table, val)
                                for i, v in ipairs(table) do
                                  if v == val then
                                    return true
                                  end
                                end
                                return false
                              end

                              local has_no_status = {
                                "ProviderConfig",
                                "ProviderConfigUsage"
                              }

                              if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then
                                health_status.status = "Healthy"
                                health_status.message = "Resource is up-to-date."
                                return health_status
                              end

                              if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then
                                if obj.kind == "ProviderConfig" and obj.status.users ~= nil then
                                  health_status.status = "Healthy"
                                  health_status.message = "Resource is in use."
                                  return health_status
                                end
                                return health_status
                              end

                              if obj.status == nil or obj.status.conditions == nil then
                                return health_status
                              end

                              for i, condition in ipairs(obj.status.conditions) do
                                if condition.type == "LastAsyncOperation" then
                                  if condition.status == "False" then
                                    health_status.status = "Degraded"
                                    health_status.message = condition.message
                                    return health_status
                                  end
                                end

                                if condition.type == "Synced" then
                                  if condition.status == "False" then
                                    health_status.status = "Degraded"
                                    health_status.message = condition.message
                                    return health_status
                                  end
                                end

                                if condition.type == "Ready" then
                                  if condition.status == "True" then
                                    health_status.status = "Healthy"
                                    health_status.message = "Resource is up-to-date."
                                    return health_status
                                  end
                                end
                              end

                              return health_status
                          "*.crossplane.io/*":
                            health.lua: |
                              health_status = {
                                status = "Progressing",
                                message = "Provisioning ..."
                              }

                              local function contains (table, val)
                                for i, v in ipairs(table) do
                                  if v == val then
                                    return true
                                  end
                                end
                                return false
                              end

                              local has_no_status = {
                                "Composition",
                                "CompositionRevision",
                                "DeploymentRuntimeConfig",
                                "ControllerConfig",
                                "ProviderConfig",
                                "ProviderConfigUsage"
                              }

                              if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then
                                health_status.status = "Healthy"
                                health_status.message = "Resource is up-to-date."
                                return health_status
                              end

                              if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then
                                if obj.kind == "ProviderConfig" and obj.status.users ~= nil then
                                  health_status.status = "Healthy"
                                  health_status.message = "Resource is in use."
                                  return health_status
                                end
                                return health_status
                              end

                              if obj.status == nil or obj.status.conditions == nil then
                                return health_status
                              end

                              for i, condition in ipairs(obj.status.conditions) do
                                if condition.type == "LastAsyncOperation" then
                                  if condition.status == "False" then
                                    health_status.status = "Degraded"
                                    health_status.message = condition.message
                                    return health_status
                                  end
                                end

                                if condition.type == "Synced" then
                                  if condition.status == "False" then
                                    health_status.status = "Degraded"
                                    health_status.message = condition.message
                                    return health_status
                                  end
                                end

                                if condition.type == "Ready" then
                                  if condition.status == "True" then
                                    health_status.status = "Healthy"
                                    health_status.message = "Resource is up-to-date."
                                    return health_status
                                  end
                                end
                              end

                              return health_status
                      rbac:
                        create: true
                        annotations: {}
                        scopes: "[groups]"
            patches:
              - fromFieldPath: spec.parameters.id
                toFieldPath: spec.providerConfigRef.name
                type: FromCompositeFieldPath
              - fromFieldPath: spec.parameters.argoCdVersion
                toFieldPath: spec.forProvider.chart.version
                type: FromCompositeFieldPath
              - fromFieldPath: "status.atProvider.state"
                toFieldPath: "status.eks.argoCdAddonReleaseStatus"
                type: ToCompositeFieldPath
          {{- end }}
